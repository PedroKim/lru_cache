c!
c
c!
n
count
n
@store
c
@store
c
c!
@count
c
capacity
self
val
c
arr
c!
arr
arr.count
count
arr
arr.shift
arr
c!
@store
elements
c
val
count
c
count
val
c
count
c
count
c!
c
@count
c!
c
@count
count
c
c!
c
val
@store
c
capacity
@store
val
c!
c
other
self
c
@store
c
elements
c
c!
elements
@store
c
elements
c
arr
c
other
self
c
count
c
count
c
other
self
c
@store
count
c
count
elements
c
c!
@count
elements
count
elements
@store
c
elements
c
c!
c
arr.instance_variable_get(:@store)
arr.store
arr
c
arr
n
arr
c
self
n
count
n
self
count
c
c!
count
self
c
n
self
n
self
n
self
n
self
self[i]
n
self[i]
self[i - 1]
n
disp i
self
val
c
c!
count
c
count
val
c
c!
arr
c
c!
self[1]
self[0]
other.length
capacity
self
other
c
other
self
c
s
n
other
self
c
capacity
self
other
c!
other
capacity
length
count
@store.length
self
other.length
self.length
c
other.length
self.length
c
other.length
self.length
c
other.length
self.length
c!
n
@store
n
disp i
@store
val
c!
disp i
c!
@store[94]
@store
count
c
disp count + i
disp i
c
disp @store[i]
disp @store
c
@store
c
@store
c
@store
c
@store[0]
c
@store
disp i
c!
i
c
@store[i]
disp i
c!
@store
capacity
disp i
c!
c
@store
c
@store
count
n
count
c
@store
n
disp i
c!
c
@store[i]
store[i]
@count
disp i
i
val
@store
c!
@count
@store
val
n
val
n
count
@store
c!
c
n
disp @store
disp i
val
@store
